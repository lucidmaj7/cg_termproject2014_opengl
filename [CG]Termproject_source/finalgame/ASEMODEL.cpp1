#include "ASEMODEL.h"


CASEMODEL::CASEMODEL(char* filename)
{



	mat_amb[0]=0.1;
	mat_amb[1]=0.1;
	mat_amb[2]=0.1;
	mat_amb[1]=0.1;

	mat_dif[0]=0.6;
	mat_dif[1]=0.2;
	mat_dif[2]=0.6;
	mat_dif[3]=0.0;

	mat_spc[0]=0.8;
	mat_spc[1]=0.2;
	mat_spc[2]=0.8;
	mat_spc[3]=0.5;
//	textureinit();
	loadASE(filename);




}
CASEMODEL::CASEMODEL(void)
{
	//	loadASE( filename);
//	printf("error!!");
//	CASEMODEL("2.ase");
}

CASEMODEL::~CASEMODEL(void)
{



}


void CASEMODEL::drawASE()
{

	glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, mat_amb);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, mat_spc);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, mat_dif);		

	//glEnable (GL_TEXTURE_2D);


//	glBindTexture (GL_TEXTURE_2D, ids[0]);
	//	glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
	// Auto-generation of texture coordinates
/*	GLfloat plane_coef_s[] = {1.0, 0.0, 0.0, 1.0};
	GLfloat plane_coef_t[] = {0.0, 1.0, 0.0, 1.0};
	glEnable (GL_TEXTURE_GEN_S);
	glTexGeni (GL_S, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
	glTexGenfv (GL_S, GL_OBJECT_PLANE, plane_coef_s);
	glEnable (GL_TEXTURE_GEN_T);
	glTexGeni (GL_T, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
	glTexGenfv (GL_T, GL_OBJECT_PLANE, plane_coef_t);

	*/

	

	//glVertex3fv();
	//	printf("%d",faceNUM);
	int nn=objlist.size();
	std::list<OBJECT> tempobjlist(objlist);



	for(int n=0;n<nn;n++)
	{
		OBJECT tempobj;
		tempobj=tempobjlist.front();
		//	printf("	objlist.push_back(tempObj); %d\n",tempobj.faceNUM);
		
		glBegin(GL_TRIANGLES);	
		for(int j=0; j<tempobj.faceNUM;j++)
		{

			for(int m=0;m<3;m++)
			{

				glNormal3f(tempobj.face[j].n[m][0],tempobj.face[j].n[m][1], tempobj.face[j].n[m][2]);
				glVertex3f(tempobj.v[tempobj.face[j].vertexnum[m]].v[0], tempobj.v[tempobj.face[j].vertexnum[m]].v[1], tempobj.v[tempobj.face[j].vertexnum[m]].v[2]);

			}

		}
		
		
		glEnd(); 
		//printf("%d ",tempobjlist.size());
		 tempobjlist.pop_front();
		
	}
	free( &tempobjlist);

	//glutSolidSphere(7,20,20);



	//glDisable (GL_TEXTURE_GEN_S);
//	glDisable (GL_TEXTURE_GEN_T);
}

void CASEMODEL::textureinit()
{
	LPCWSTR file=TEXT("earth.bmp"); 


	tex[0]=auxDIBImageLoad(TEXT("earth.bmp"));

	glGenTextures(2, &ids[0]);

	{

		wprintf(bitmap);

		glBindTexture (GL_TEXTURE_2D, ids[0]);

		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

		glTexImage2D(GL_TEXTURE_2D, 0, 3, tex[0]->sizeX, tex[0]->sizeY, 0, GL_RGB, GL_UNSIGNED_BYTE, tex[0]->data);
	}

	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE,GL_MODULATE);

}

void CASEMODEL::loadASE(char* filename)
{
	FILE *f;
	FILE *g;
	FILE *h;
	f=fopen(filename,"r");
	//h=fopen("normal.txt","r");
	g=fopen("out.txt","w");


	float a,b,c;
	int d;
	int i=0;


	char buf[1000];
	//VERTEX v[8];
	char line[256];



	while(!feof(f))
	{
		fscanf(f,"%[^\n]\n",buf);
		//fgets(line,256,f);
		//sscanf(line,"%s",buf);
		//puts(buf);


		if(strstr(buf,"*GEOMOBJECT {"))
		{
			OBJECT tempObj;

			while(1)
			{
				fscanf(f,"%[^\n]\n",buf);
				if(strstr(buf,"*PROP_MOTIONBLUR"))
				{
					objlist.push_back(tempObj);
					printf("	objlist.push_back(tempObj); %d\n",tempObj.faceNUM);
					break;
				}
				if(strstr(buf,"*MESH_NUMVERTEX"))
				{	
				//	puts(buf);
					sscanf(buf,"*MESH_NUMVERTEX %d\n",&tempObj.vertexNUM);
					tempObj.v=(PVERTEX)malloc(tempObj.vertexNUM*sizeof(VERTEX));
				}
				if(strstr(buf,"*MESH_NUMFACES"))
				{
			//		puts(buf);
					sscanf(buf,"*MESH_NUMFACES %d\n",&tempObj.faceNUM);
					tempObj.n=(PVERTEX)malloc(tempObj.vertexNUM*sizeof(VERTEX));
				}
				if(strstr(buf,"*MESH_VERTEX_LIST {"))//"*MESH_VERTEX_LIST
				{
					while(1)
					{
						fscanf(f,"%[^\n]\n",buf);
						if(strstr(buf,"}"))
							break;
					//	puts(buf);
						//printf("-");
						sscanf(buf,"\t\t\t*MESH_VERTEX %d\t%f %f %f\n",&d,&tempObj.v[i].v[0],&tempObj.v[i].v[2],&tempObj.v[i].v[1]);

						i++;

					}
				}

				if(strstr(buf,"*MATERIAL_AMBIENT"))
				{
					sscanf(buf,"*MATERIAL_AMBIENT %f %f %f\n",&mat_amb[0],&mat_amb[1],&mat_amb[2]);
					mat_amb[3]=1;

				}
				if(strstr(buf,"*MATERIAL_DIFFUSE"))
				{
					sscanf(buf,"*MATERIAL_DIFFUSE %f %f %f\n",&mat_dif[0],&mat_dif[1],&mat_dif[2]);
					mat_dif[3]=1;

				}
				if(strstr(buf,"*MATERIAL_SPECULAR"))
				{
					sscanf(buf,"*MATERIAL_SPECULAR %f %f %f\n",&mat_spc[0],&mat_spc[1],&mat_spc[2]);
					mat_spc[3]=1;

				}

				if(strstr(buf,"*MESH_NORMALS {"))
				{
					tempObj.face=(PFACE)malloc(tempObj.faceNUM*sizeof(FACE));
					int faceflag=-1;
					int k=-1;
					while(1)
					{
						GLfloat temp[3];
						//VERTEX temp;
						int bb=0;

						//fgets(buf,sizeof(100),h);
						//buf[100-1]=0;
						fscanf(f,"%[^\n]\n",buf);
						if(strstr(buf,"}"))
							break;
						//	puts(buf);
						//		puts(buf);

						if(strstr(buf,"*MESH_FACENORMAL"))
						{
							//	printf("*MESH_FACENORMAL");
							faceflag++;
							k=-1;
							//buf[0]=0;
						}else
						{
							//	puts(buf);
							//	fscanf(f,"\t\t\t*MESH_VERTEXNORMAL %d\t%f %f %f\n",&bb,&temp.x,&temp.z,&temp.y);
							sscanf(buf,"\t\t\t\t*MESH_VERTEXNORMAL %d\t%f %f %f\n",&bb,&temp[0],&temp[2],&temp[1]);
							//	temp[3]=0;
							k++;
							tempObj.face[faceflag].n[k][0]=temp[0];
							tempObj.face[faceflag].n[k][1]=temp[1];
							tempObj.face[faceflag].n[k][2]=temp[2];



							tempObj.face[faceflag].vertexnum[k]=bb;


						}
					}
				}


				

			}


		}

	}

	fclose(g);
}